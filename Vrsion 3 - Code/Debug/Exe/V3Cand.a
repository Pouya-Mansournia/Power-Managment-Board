;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/6/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 14.745600 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;
;#define     BUZZ        PORTD.3
;#define     Re5v        PORTD.5
;#define     Re12v       PORTD.6
;
;#define     LEDR        PORTB.0
;#define     LEDG        PORTB.1
;#define     LEDB        PORTB.2
;
;#define     Curr1       ADC.5
;#define     Curr2       ADC.4
;#define     LM35        ADC.2
;
;int C1,C2,Lm;
;char E;
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 64
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0048 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0049 char status,data;
; 0000 004A status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 004B data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 004C if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 004D    {
; 0000 004E    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 004F #if RX_BUFFER_SIZE == 256
; 0000 0050    // special case for receiver buffer size=256
; 0000 0051    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0052 #else
; 0000 0053    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0054    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0055       {
; 0000 0056       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 0057       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0058       }
; 0000 0059 #endif
; 0000 005A    }
;PCODE: $00000029 VOL: 0
; 0000 005B }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0062 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0063 char data;
; 0000 0064 while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0065 data=rx_buffer[rx_rd_index++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0066 #if RX_BUFFER_SIZE != 256
; 0000 0067 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0068 #endif
; 0000 0069 #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 006A --rx_counter;
;PCODE: $00000043 VOL: 0
; 0000 006B #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 006C return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006D }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 64
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0083 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0084 if (tx_counter)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0085    {
; 0000 0086    --tx_counter;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0087    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0088 #if TX_BUFFER_SIZE != 256
; 0000 0089    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008A #endif
; 0000 008B    }
;PCODE: $0000005F VOL: 0
; 0000 008C }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0093 {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0094 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000066 VOL: 0
;	c -> Y+0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0095 #asm("cli")
;PCODE: $0000006D VOL: 0
	cli
;PCODE: $0000006E VOL: 0
; 0000 0096 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0097    {
; 0000 0098    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0099 #if TX_BUFFER_SIZE != 256
; 0000 009A    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 009B #endif
; 0000 009C    ++tx_counter;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 009D    }
; 0000 009E else
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 009F    UDR=c;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00A0 #asm("sei")
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
	sei
;PCODE: $0000008E VOL: 0
; 0000 00A1 }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;unsigned char adc_data;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 00AE {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AF // Read the 8 most significant bits
; 0000 00B0 // of the AD conversion result
; 0000 00B1 adc_data=ADCH;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B2 }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;// Read the 8 most significant bits
;// of the AD conversion result
;// with noise canceling
;unsigned char read_adc(unsigned char adc_input)
; 0000 00B8 {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B9 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000009B VOL: 0
;	adc_input -> Y+0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00BA // Delay needed for the stabilization of the ADC input voltage
; 0000 00BB delay_us(10);
;PCODE: $0000009F VOL: 0
; 0000 00BC #asm
;PCODE: $000000A0 VOL: 0
; 0000 00BD     in   r30,mcucr
    in   r30,mcucr
;PCODE: $000000A1 VOL: 0
; 0000 00BE     cbr  r30,__sm_mask
    cbr  r30,__sm_mask
;PCODE: $000000A2 VOL: 0
; 0000 00BF     sbr  r30,__se_bit | __sm_adc_noise_red
    sbr  r30,__se_bit | __sm_adc_noise_red
;PCODE: $000000A3 VOL: 0
; 0000 00C0     out  mcucr,r30
    out  mcucr,r30
;PCODE: $000000A4 VOL: 0
; 0000 00C1     sleep
    sleep
;PCODE: $000000A5 VOL: 0
; 0000 00C2     cbr  r30,__se_bit
    cbr  r30,__se_bit
;PCODE: $000000A6 VOL: 0
; 0000 00C3     out  mcucr,r30
    out  mcucr,r30
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C4 #endasm
; 0000 00C5 return adc_data;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00C6 }
;PCODE: $000000AC VOL: 0
;
;void main(void)
; 0000 00C9 {
;PCODE: $000000AD VOL: 0
; 0000 00CA // Declare your local variables here
; 0000 00CB 
; 0000 00CC // Input/Output Ports initialization
; 0000 00CD // Port B initialization
; 0000 00CE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 00CF DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00D0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 00D1 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00D2 
; 0000 00D3 // Port C initialization
; 0000 00D4 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D5 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00D6 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D7 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00D8 
; 0000 00D9 // Port D initialization
; 0000 00DA // Function: Bit7=In Bit6=Out Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 00DB DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00DC // State: Bit7=T Bit6=0 Bit5=0 Bit4=T Bit3=1 Bit2=T Bit1=T Bit0=T
; 0000 00DD PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00DE 
; 0000 00DF // Timer/Counter 0 initialization
; 0000 00E0 // Clock source: System Clock
; 0000 00E1 // Clock value: Timer 0 Stopped
; 0000 00E2 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00E3 TCNT0=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00E4 
; 0000 00E5 // Timer/Counter 1 initialization
; 0000 00E6 // Clock source: System Clock
; 0000 00E7 // Clock value: Timer1 Stopped
; 0000 00E8 // Mode: Normal top=0xFFFF
; 0000 00E9 // OC1A output: Disconnected
; 0000 00EA // OC1B output: Disconnected
; 0000 00EB // Noise Canceler: Off
; 0000 00EC // Input Capture on Falling Edge
; 0000 00ED // Timer1 Overflow Interrupt: Off
; 0000 00EE // Input Capture Interrupt: Off
; 0000 00EF // Compare A Match Interrupt: Off
; 0000 00F0 // Compare B Match Interrupt: Off
; 0000 00F1 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00F2 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00F3 TCNT1H=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F4 TCNT1L=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00F5 ICR1H=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00F6 ICR1L=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F7 OCR1AH=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F8 OCR1AL=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F9 OCR1BH=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00FA OCR1BL=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00FB 
; 0000 00FC // Timer/Counter 2 initialization
; 0000 00FD // Clock source: System Clock
; 0000 00FE // Clock value: Timer2 Stopped
; 0000 00FF // Mode: Normal top=0xFF
; 0000 0100 // OC2 output: Disconnected
; 0000 0101 ASSR=0<<AS2;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0102 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0103 TCNT2=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0104 OCR2=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0105 
; 0000 0106 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0107 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0108 
; 0000 0109 // External Interrupt(s) initialization
; 0000 010A // INT0: Off
; 0000 010B // INT1: Off
; 0000 010C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 010D 
; 0000 010E // USART initialization
; 0000 010F // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0110 // USART Receiver: On
; 0000 0111 // USART Transmitter: On
; 0000 0112 // USART Mode: Asynchronous
; 0000 0113 // USART Baud Rate: 115200
; 0000 0114 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0115 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0116 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0117 UBRRH=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0118 UBRRL=0x07;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0119 
; 0000 011A // Analog Comparator initialization
; 0000 011B // Analog Comparator: Off
; 0000 011C // The Analog Comparator's positive input is
; 0000 011D // connected to the AIN0 pin
; 0000 011E // The Analog Comparator's negative input is
; 0000 011F // connected to the AIN1 pin
; 0000 0120 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0121 
; 0000 0122 // ADC initialization
; 0000 0123 // ADC Clock frequency: 230.400 kHz
; 0000 0124 // ADC Voltage Reference: AVCC pin
; 0000 0125 // Only the 8 most significant bits of
; 0000 0126 // the AD conversion result are used
; 0000 0127 ADMUX=ADC_VREF_TYPE;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0128 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0129 SFIOR=(0<<ACME);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 012A 
; 0000 012B // SPI initialization
; 0000 012C // SPI disabled
; 0000 012D SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 012E 
; 0000 012F // TWI initialization
; 0000 0130 // TWI disabled
; 0000 0131 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0132 
; 0000 0133 // Global enable interrupts
; 0000 0134 #asm("sei")
;PCODE: $000000F4 VOL: 0
	sei
;PCODE: $000000F5 VOL: 0
; 0000 0135 
; 0000 0136 
; 0000 0137 BUZZ=0;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0138 delay_ms(200);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0139 BUZZ=1;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 013A delay_ms(100);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 013B BUZZ=0;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 013C delay_ms(200);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 013D BUZZ=1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 013E delay_ms(100);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 013F BUZZ=0;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0140 delay_ms(200);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0141 BUZZ=1;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0142 delay_ms(100);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0143 
; 0000 0144 Re5v=1;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0145 Re12v=1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0146 
; 0000 0147 while (1)
;PCODE: $00000118 VOL: 0
; 0000 0148       {
; 0000 0149       C1=read_adc(5);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 014A       C2=read_adc(4);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 014B       Lm=read_adc(2);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 014C       delay_ms(10);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 014D 
; 0000 014E       if(rx_counter > 0)
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 014F 
; 0000 0150             {
; 0000 0151                     Lm=(Lm/2.045);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0152                     if (Lm >= 45)
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0153                     {
; 0000 0154                     BUZZ=0;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0155                     }
; 0000 0156                     else
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0157                     {
; 0000 0158                     BUZZ=1;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0159                     }
;PCODE: $0000013B VOL: 0
; 0000 015A                     E=getchar();
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 015B                     if(E=='U')
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 015C                     {
; 0000 015D                     printf(
; 0000 015E                     "$%1d,%1d,%1d\n\r",C2,C1,Lm);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 015F                     }
; 0000 0160                     if( E == 'A' )
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0161                     {
; 0000 0162                     Re5v=1;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0163                     }
; 0000 0164                     if( E == 'B' )
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0165                     {
; 0000 0166                     Re5v=0;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0167                     }
; 0000 0168                     if( E == 'C' )
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0169                     {
; 0000 016A                     Re12v=1;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 016B                     }
; 0000 016C                     if( E == 'D' )
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 016D                     {
; 0000 016E                     Re12v=0;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 016F                     }
; 0000 0170                     if( E == 'Z' )
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0171                     {
; 0000 0172                     BUZZ=0;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0173                     }
; 0000 0174                     if( E == 'M' )
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0175                     {
; 0000 0176                     BUZZ=1;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0177                     }
; 0000 0178             }
;PCODE: $00000175 VOL: 0
; 0000 0179 
; 0000 017A             else if (rx_counter == 0)
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 017B             {
; 0000 017C                    Lm=(Lm/2.045);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 017D                     if (Lm > 45)
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 017E                     {
; 0000 017F                     BUZZ=0;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0180                     LEDG=0;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0181                     LEDR=1;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0182                     }
; 0000 0183                     else
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0184                     {
; 0000 0185                     BUZZ=1;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0186                     LEDR=0;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0187                     }
;PCODE: $00000190 VOL: 0
; 0000 0188             }
; 0000 0189       }
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 018A }
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
